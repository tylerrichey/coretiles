# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) }}:
    winPath: '$(Build.ArtifactStagingDirectory)\coretiles-win'
    linPath: '$(Build.ArtifactStagingDirectory)\coretiles-linux'
    osxPath: '$(Build.ArtifactStagingDirectory)\coretiles-osx'
  tagVersion: replace('$(Build.SourceBranch)', 'refs/tags/', '')
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    winPath: '$(Build.ArtifactStagingDirectory)\coretiles-win-$(tagVersion)'
    linPath: '$(Build.ArtifactStagingDirectory)\coretiles-linux-$(tagVersion)'
    osxPath: '$(Build.ArtifactStagingDirectory)\coretiles-osx-$(tagVersion)'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '-c $(buildConfiguration)'
  displayName: 'dotnet build $(buildConfiguration)'

- script: dotnet test --logger trx --collect "Code coverage"
- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: False
    arguments: '-p:PublishProfile=WinProfile -o $(winPath)'
    zipAfterPublish: true

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: False
    arguments: '-p:PublishProfile=LinuxProfile -o $(linPath)'
    zipAfterPublish: True

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: False
    arguments: '-p:PublishProfile=OSXProfile -o $(osxPath)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(winPath)'
    artifactName: 'coretiles-win'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(linPath)' 
    artifactName: 'coretiles-linux'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(osxPath)'
    artifactName: 'coretiles-osx'

- task: GithubRelease@0 
  displayName: 'Create GitHub Release'
  inputs:
    gitHubConnection: github.com_tylerrichey
    repositoryName: tylerrichey/coretiles
    isDraft: true
    assets: |
      $(winPath)
      $(linPath)
      $(osxPath)
  